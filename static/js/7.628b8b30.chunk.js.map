{"version":3,"sources":["components/common/FormsControls/FormsControls.js","utils/validators/validators.js","components/Login/Login.jsx","components/Login/LoginContainer.jsx"],"names":["FormControl","input","meta","error","touched","children","hasError","className","Textarea","props","restProps","Input","customField","placeholder","name","validators","component","fieldClass","validate","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","type","id","htmlFor","connect","isAuth","to","formData","getLoginUserData","email","password","rememberMe","LoginContainer","this","React","Component","state","login","auth"],"mappings":"uQAGMA,EAAc,SAAC,GAAyD,EAAxDC,MAAyD,IAAD,IAAjDC,KAAOC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,QAAUC,EAAyB,EAAzBA,SAC3CC,GADoE,2CACzDH,GAASC,GAC1B,OACI,yBAAKG,UAAW,iBAAmBD,EAAW,QAAU,KACnDD,EACAC,GAAY,0BAAMC,UAAW,cAAeJ,KAI5CK,EAAW,SAACC,GAAW,IACzBR,EAA+BQ,EAA/BR,MAAiBS,GAAcD,EAAxBP,KADiB,YACOO,EADP,mBAE/B,OAAO,kBAACT,EAAgBS,EAAO,8CAAcR,EAAWS,MAE/CC,EAAQ,SAACF,GAAW,IACtBR,EAA8BQ,EAA9BR,MAAgBS,GAAcD,EAAvBP,KADc,YACSO,EADT,mBAE5B,OAAO,kBAACT,EAAgBS,EAAO,2CAAWR,EAAWS,MAE5CE,EAAc,SAACC,EAAaC,EAAMC,EAAYC,EAAWC,GAA3C,IAAuDR,EAAvD,uDAAgE,GAAhE,OACvB,kBAAC,IAAD,eAAOO,UAAWA,EAAWE,SAAUH,EAAYD,KAAMA,EAAMD,YAAaA,EAAaN,UAAWU,GAAgBR,M,uDCrBxH,oEAAO,IAAMU,EAAW,SAACC,GACrB,OAAGA,OACC,EAGO,qBAIFC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,OAAGA,EAAMG,OAASD,EACR,iBAAN,OAAwBA,QAGxB,K,8KCWFE,EAAiBC,YAAU,CAC7BC,KAAM,SADaD,EAjBL,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcxB,EAAW,EAAXA,MAC9B,OACI,0BAAMyB,SAAUD,EAAcpB,UAAU,cACnCK,YAAY,QAAS,QAAS,CAACO,KAAWR,IAAO,oBAAqB,CAACkB,KAAK,UAC5EjB,YAAY,WAAY,WAAY,CAACO,KAAWR,IAAO,oBAAqB,CAACkB,KAAK,aACnF,yBAAKtB,UAAU,gBACVK,YAAY,KAAM,aAAc,KAAM,QAAS,WAAY,CAACiB,KAAK,WAAYC,GAAI,aAClF,2BAAOC,QAAQ,YAAf,gBAEH5B,GAAS,yBAAKI,UAAU,iBACpBJ,GAEL,4BAAQI,UAAU,YAAlB,aAqBGyB,iBAZD,SAACvB,GAIX,OAAGA,EAAMwB,OACE,kBAAC,IAAD,CAAUC,GAAI,cAElB,yBAAK3B,UAAU,SAClB,qCACA,kBAACiB,EAAD,CAAgBI,SARH,SAACO,GACd1B,EAAM2B,iBAAiBD,EAASE,MAAOF,EAASG,SAAUH,EAASI,mB,QC1BrEC,E,iLAEE,OAAO,oCACH,kBAAC,EAAUC,KAAKhC,Y,GAHCiC,IAAMC,WAYpBX,uBALS,SAACY,GAAD,MAAY,CAChCC,MAAOD,EAAME,KAAKD,MAClBZ,OAAQW,EAAME,KAAKb,UAGiB,CAACG,sBAA1BJ,CAA6CQ","file":"static/js/7.628b8b30.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./FormsControls.css\";\nimport {Field} from \"redux-form\";\nconst FormControl = ({input, meta: {error, touched}, children, ...props} ) => {\n    const hasError = error && touched;\n    return (\n        <div className={\"form-control \" + (hasError ? \"error\" : \"\")}>\n            {children}\n            {hasError && <span className={\"error-span\"}>{error}</span>}\n        </div>\n    )\n};\nexport const Textarea = (props) => {\n    const {input, meta,  ...restProps } = props;\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n};\nexport const Input = (props) => {\n    const {input, meta, ...restProps } = props;\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\n};\nexport const customField = (placeholder, name, validators, component, fieldClass, props  = {}) => (\n    <Field component={component} validate={validators} name={name} placeholder={placeholder} className={fieldClass} {...props} />\n);","export const required = (value) => {\n    if(value) {\n        return undefined;\n    }\n    else {\n        return \"Field is required\";\n    }\n}\n\nexport const maxLengthCreator = (maxLength) => (value) => {\n    if(value.length > maxLength) {\n        return `Max length is ${maxLength}`;\n    }\n    else {\n        return undefined;\n    }\n}","import React from \"react\";\nimport \"./Login.css\";\nimport {reduxForm} from 'redux-form'\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {customField, Input} from \"../common/FormsControls/FormsControls\";\nimport {required} from \"../../utils/validators/validators\";\n\nconst LoginForm = ({handleSubmit, error}) => {\n    return (\n        <form onSubmit={handleSubmit} className=\"login-form\">\n            {customField(\"Login\", \"email\", [required], Input, \"login-form__input\", {type:\"email\"})}\n            {customField(\"Password\", \"password\", [required], Input, \"login-form__input\", {type:\"password\"})}\n            <div className=\"checkbox-box\">\n                {customField(null, \"rememberMe\", null, \"input\", \"checkbox\", {type:\"checkbox\", id: \"remember\"})}\n                <label htmlFor=\"remember\">Remember me</label>\n            </div>\n            {error && <div className=\"summary-error\">\n                {error}\n            </div>}\n            <button className=\"form-btn\">Login</button>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm({\n    form: 'login'\n})(LoginForm);\n\nconst Login = (props) => {\n    const onSubmit = (formData) => {\n        props.getLoginUserData(formData.email, formData.password, formData.rememberMe);\n    };\n    if(props.isAuth) {\n        return <Redirect to={\"/profile/\"} />\n    }\n    return <div className=\"login\">\n        <h1>Login</h1>\n        <LoginReduxForm onSubmit={onSubmit} />\n    </div>\n}\nexport default connect()(Login);","import React from 'react';\nimport Login from \"./Login\";\nimport {connect} from \"react-redux\";\nimport {getLoginUserData} from \"../../redux/auth-reducer\";\n\nclass LoginContainer extends React.Component {\n    render() {\n        return <>\n            <Login {...this.props} />\n        </>\n    }\n}\nconst mapStateToProps = (state) => ({\n    login: state.auth.login,\n    isAuth: state.auth.isAuth\n});\n\nexport default connect(mapStateToProps, {getLoginUserData})(LoginContainer);"],"sourceRoot":""}