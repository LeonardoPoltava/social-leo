{"version":3,"sources":["components/common/FormsControls/FormsControls.js","utils/validators/validators.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileStatusHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["FormControl","input","meta","error","touched","children","hasError","className","Textarea","props","restProps","Input","customField","placeholder","name","validators","component","fieldClass","validate","required","value","maxLengthCreator","maxLength","length","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","TypeError","ProfileStatusHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","event","currentTarget","onBlur","updateStatus","type","ProfileDataFormReduxForm","reduxForm","form","profile","handleSubmit","onSubmit","lookingForAJob","ProfileData","isOwner","activateEditMode","onClick","lookingForAJobDescription","aboutMe","keys","contacts","map","key","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","src","photos","large","alt","e","target","files","id","htmlFor","fullName","initialValues","formData","then","Preloader","Post","width","height","message","href","likeCounter","maxLength10","MyPosts","React","memo","postsElement","posts","p","likesCount","AddPostReduxForm","values","addPost","postArea","Field","cols","rows","MyPostsContainer","connect","state","profilePage","dispatch","newPostText","addPostCreator","Profile","store","ProfileContainerAPI","userId","this","match","params","currentUserId","history","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.b98461b7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./FormsControls.css\";\nimport {Field} from \"redux-form\";\nconst FormControl = ({input, meta: {error, touched}, children, ...props} ) => {\n    const hasError = error && touched;\n    return (\n        <div className={\"form-control \" + (hasError ? \"error\" : \"\")}>\n            {children}\n            {hasError && <span className={\"error-span\"}>{error}</span>}\n        </div>\n    )\n};\nexport const Textarea = (props) => {\n    const {input, meta,  ...restProps } = props;\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n};\nexport const Input = (props) => {\n    const {input, meta, ...restProps } = props;\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\n};\nexport const customField = (placeholder, name, validators, component, fieldClass, props  = {}) => (\n    <Field component={component} validate={validators} name={name} placeholder={placeholder} className={fieldClass} {...props} />\n);","export const required = (value) => {\n    if(value) {\n        return undefined;\n    }\n    else {\n        return \"Field is required\";\n    }\n}\n\nexport const maxLengthCreator = (maxLength) => (value) => {\n    if(value.length > maxLength) {\n        return `Max length is ${maxLength}`;\n    }\n    else {\n        return undefined;\n    }\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import React, {useState, useEffect} from \"react\";\n\nconst ProfileStatusHooks = (props) => {\n    let [editMode,setEditMode] = useState(false);\n    let [status,setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const activateMode = () => {\n        setEditMode(true);\n    };\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    };\n    const onStatusChange =  (event) => {\n        setStatus(event.currentTarget.value);\n    };\n\n    return (\n        <div>\n            {!editMode && <span onDoubleClick={activateMode} className=\"profile-status\">{props.status || \"No status\"}</span>}\n            {editMode &&\n            <input\n                autoFocus={true}\n                onChange={onStatusChange}\n                onBlur={deactivateEditMode}\n                type=\"text\"\n                value={status}\n                className=\"profile-status-input\"\n            />}\n        </div>\n    )\n}\nexport default ProfileStatusHooks;","import React from \"react\";\nimport {reduxForm} from \"redux-form\";\nimport {customField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\n\nexport const ProfileDataForm = ({profile, handleSubmit}) => {\n    return <form onSubmit={handleSubmit} className=\"profile-info-list\">\n        <li className={\"profile-info-list__elem\"}>\n            <button type={\"submit\"}>Save</button>\n        </li>\n        <li className={\"profile-info-list__elem\"}>\n            <b>Looking for a job</b>: { customField(\"\", \"lookingForAJob\", [], Input, \"\", {type: \"checkbox\"} )}\n        </li>\n        {profile.lookingForAJob && // Если Ищу работу равно тру\n        <li className={\"profile-info-list__elem\"}>\n            <b>My professional skills</b>: { customField(\"\", \"lookingForAJobDescription\", [], Textarea )}\n        </li>\n        }\n        <li className={\"profile-info-list__elem\"}>\n            <b>About me:</b> { customField(\"\", \"aboutMe\", [], Input, \"\")}\n        </li>\n        <li className={\"profile-info-list__elem\"}>\n            <b>Contacts:</b>\n        </li>\n    </form>\n};\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm)\nexport default ProfileDataFormReduxForm;","import React , {useState} from 'react';\nimport \"./ProfileInfo.css\";\nimport ProfileStatusHooks from \"./ProfileStatusHooks\";\nimport ProfileDataForm from \"./ProfileDataForm\";\nimport Preloader from \"../../common/preloader/Preloader\";\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n    const onMainPhotoSelected = (e) =>{\n        if(e.target.files.length) {\n            savePhoto(e.target.files[0]);\n        }\n    };\n    let [editMode,setEditMode] = useState(false);\n\n    const onSubmit = (formData) => {\n        saveProfile(formData).then(\n            () => {\n                setEditMode(false);\n            }\n        );\n    };\n    if(!profile) {\n        return <Preloader/>\n    }\n    return (\n        <div className=\"\">\n            <h1>Profile</h1>\n            <div className=\"description\">\n                <div className=\"description-holder\">\n                    <div className=\"photo-holder\">\n                        <img src={profile.photos.large ? profile.photos.large : \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSwuab-TXFNmiH1vzYJx_Oo7Dtxe0XtogHfy1hZwRHPx5Y4EOvS&s\"} alt=\"\" className=\"avatar\"/>\n                        {isOwner &&\n                        <>\n                            <input type='file' onChange={onMainPhotoSelected} id={\"add-photo\"} className={'add-photo'} />\n                            <label htmlFor=\"add-photo\">Add photo</label>\n                        </>\n                        }\n                    </div>\n                    <div className=\"profile-info-box\">\n                        <span className=\"profile-name\">{profile.fullName}</span>\n                        <ProfileStatusHooks status={status} updateStatus={updateStatus} />\n                    </div>\n                </div>\n                {editMode ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} /> : <ProfileData activateEditMode={() => {setEditMode(true)}} profile={profile} isOwner={isOwner} /> }\n            </div>\n        </div>\n    );\n};\nconst ProfileData = ({profile, isOwner, activateEditMode}) => {\n    return <ul className=\"profile-info-list\">\n        {isOwner && <li className={\"profile-info-list__elem\"}>\n            <button onClick={activateEditMode}>Edit</button>\n        </li>}\n        <li className={\"profile-info-list__elem\"}>\n            <b>Looking for a job:</b> {profile.lookingForAJob ? \"Yes\" : \"No\"};\n        </li>\n        {profile.lookingForAJob && // Если Ищу работу равно тру\n        <li className={\"profile-info-list__elem\"}>\n            <b>My professional skills:</b> {profile.lookingForAJobDescription};\n        </li>\n        }\n        <li className={\"profile-info-list__elem\"}>\n            <b>About me:</b> {profile.aboutMe};\n        </li>\n        <li className={\"profile-info-list__elem\"}>\n            <b>Contacts:</b>\n            <div className=\"contacts-list\">\n                {Object.keys(profile.contacts).map(key => {\n                        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\n                    }\n                )}\n            </div>\n        </li>\n    </ul>\n}\nconst Contact = ({contactTitle, contactValue}) => {\n    return <div className={\"contacts-box\"}><b>{contactTitle}</b>: {contactValue}</div>\n};\nexport default ProfileInfo;","import React from 'react';\nimport \"./Post.css\";\nconst Post = (props) => {\n    return (\n        <div className=\"post\" id={props.id}>\n            <img src=\"https://i.pinimg.com/originals/51/f6/fb/51f6fb256629fc755b8870c801092942.png\" alt=\"\" width={50} height={50} className=\"post-avatar\"/>\n            <span className=\"post-name\">{props.name}</span>\n            <span className=\"post-text\">{props.message}</span>\n            <a href=\"/\" className=\"post-like\">Like</a>\n            <span className=\"like-counter\">({props.likeCounter})</span>\n        </div>\n    );\n}\nexport default Post;","import React from 'react';\nimport \"./MyPosts.css\";\nimport Post from \"./Post/Post\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\nconst maxLength10 = maxLengthCreator(10);\n\nconst MyPosts = React.memo(props => {\n    let postsElement =\n        props.posts.map(p => <Post id={p.id} key={p.id} message={p.message} likeCounter={p.likesCount}/>);\n\n    let onSubmit = (values) => {\n        props.addPost(values.postArea);\n    };\n    return (\n        <div className=\"posts\">\n            <h2>My posts</h2>\n            <AddPostReduxForm onSubmit={onSubmit}/>\n            {postsElement}\n        </div>\n    );\n});\n\nconst postForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit} className=\"posts-form\">\n            <Field\n                component={Textarea}\n                placeholder={\"Type your message here..\"}\n                name=\"postArea\"\n                id=\"post-area\"\n                cols=\"30\"\n                rows=\"10\"\n                validate={[required, maxLength10]}\n            >\n            </Field>\n            <button>Add post</button>\n        </form>\n    )\n};\nconst AddPostReduxForm = reduxForm({\n    form: 'postsAddMessageForm'\n})(postForm);\nexport default MyPosts;","\nimport {addPostCreator} from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n\nconst mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.posts\n    }\n};\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (newPostText) => {dispatch(addPostCreator(newPostText))}\n    }\n};\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\nexport default MyPostsContainer;","import React from 'react';\nimport \"./Profile.css\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\nconst Profile = (props) => {\n    return (\n        <div className=\"profile\">\n            <ProfileInfo savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\n            <MyPostsContainer store={props.store} />\n        </div>\n    );\n}\nexport default Profile;","import React from 'react';\nimport {connect} from \"react-redux\";\nimport Profile from \"./Profile\";\nimport {getUserProfile, getStatus, updateStatus, savePhoto} from \"../../redux/profile-reducer\";\nimport {withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\n\nclass ProfileContainerAPI extends React.Component {\n    refreshProfile() {\n        let userId = this.props.match.params.userId;\n        if(!userId) {\n            userId = this.props.currentUserId;\n            if(!userId) {\n                this.props.history.push(\"/login/\");\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n    }\n    componentDidMount() {\n        this.refreshProfile();\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile();\n        }\n    }\n\n    render() {\n        return <Profile savePhoto={this.props.savePhoto} isOwner={!this.props.match.params.userId} {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus} />\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        currentUserId: state.auth.userId,\n        isAuth: state.auth.isAuth\n    }\n};\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\n    withRouter\n) (ProfileContainerAPI);"],"sourceRoot":""}