{"ast":null,"code":"import _defineProperty from \"/home/vladyslav/projects/react_social_git/social-leo/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'social-network/auth/SET_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      {\n        return _objectSpread({}, state, {}, action.payload);\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  let response = await authAPI.auth();\n\n  if (response.data.resultCode === 0) {\n    let _response$data$data = response.data.data,\n        id = _response$data$data.id,\n        email = _response$data$data.email,\n        login = _response$data$data.login;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const getLoginUserData = (login, password, rememberMe) => async dispatch => {\n  let response = await authAPI.login(login, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else {\n    let message = response.data.messages.length > 0 ? response.data.messages : \"Error\";\n    dispatch(stopSubmit(\"login\", {\n      _error: message\n    }));\n  }\n};\nexport const getLogoutUserData = () => async dispatch => {\n  let response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"sources":["/home/vladyslav/projects/react_social_git/social-leo/src/redux/auth-reducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","response","auth","data","resultCode","id","getLoginUserData","password","rememberMe","message","messages","length","_error","getLogoutUserData","logout"],"mappings":";;;;;;AAAA,SAAQA,OAAR,QAAsB,YAAtB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,MAAMC,aAAa,GAAG,mCAAtB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,aAAL;AAAoB;AAChB,iCACOO,KADP,MAEOC,MAAM,CAACE,OAFd;AAIH;;AACD;AAAS;AACL,eAAOH,KAAP;AACH;AATL;AAWH,CAZD;;AAcA,OAAO,MAAMI,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,MAAmC;AAACI,EAAAA,IAAI,EAAET,aAAP;AAAsBU,EAAAA,OAAO,EAAE;AAACR,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB;AAA/B,CAAnC,CAAxB;AACP,OAAO,MAAMO,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACrD,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACiB,IAAR,EAArB;;AAEA,MAAGD,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAhC,EAAmC;AAAA,8BACNH,QAAQ,CAACE,IAAT,CAAcA,IADR;AAAA,QAC1BE,EAD0B,uBAC1BA,EAD0B;AAAA,QACtBf,KADsB,uBACtBA,KADsB;AAAA,QACfC,KADe,uBACfA,KADe;AAE/BS,IAAAA,QAAQ,CAACF,eAAe,CAACO,EAAD,EAAKf,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,CAPM;AASP,OAAO,MAAMe,gBAAgB,GAAG,CAACf,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,KAAiC,MAAOR,QAAP,IAAoB;AACjF,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACM,KAAR,CAAcA,KAAd,EAAqBgB,QAArB,EAA+BC,UAA/B,CAArB;;AAEA,MAAGP,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAhC,EAAmC;AAC/BJ,IAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH,GAFD,MAGK;AACD,QAAIU,OAAO,GAAGR,QAAQ,CAACE,IAAT,CAAcO,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCV,QAAQ,CAACE,IAAT,CAAcO,QAAlD,GAA6D,OAA3E;AACAV,IAAAA,QAAQ,CAACd,UAAU,CAAC,OAAD,EAAU;AAAC0B,MAAAA,MAAM,EAAEH;AAAT,KAAV,CAAX,CAAR;AACH;AACJ,CAVM;AAWP,OAAO,MAAMI,iBAAiB,GAAG,MAAM,MAAOb,QAAP,IAAoB;AACvD,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAAC6B,MAAR,EAArB;;AAEA,MAAGb,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAhC,EAAmC;AAC/BJ,IAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,CANM;AAQP,eAAeL,WAAf","sourcesContent":["import {authAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\n\nconst SET_USER_DATA = 'social-network/auth/SET_USER_DATA';\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n    switch(action.type){\n        case SET_USER_DATA: {\n            return {\n                ...state,\n                ...action.payload\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({type: SET_USER_DATA, payload: {userId, email, login, isAuth}});\nexport const getAuthUserData = () => async (dispatch) => {\n    let response = await authAPI.auth();\n\n    if(response.data.resultCode === 0) {\n        let {id, email, login} = response.data.data;\n        dispatch(setAuthUserData(id, email, login, true));\n    }\n}\n\nexport const getLoginUserData = (login, password, rememberMe) => async (dispatch) => {\n    let response = await authAPI.login(login, password, rememberMe);\n\n    if(response.data.resultCode === 0) {\n        dispatch(getAuthUserData());\n    }\n    else {\n        let message = response.data.messages.length > 0 ? response.data.messages : \"Error\";\n        dispatch(stopSubmit(\"login\", {_error: message}));\n    }\n};\nexport const getLogoutUserData = () => async (dispatch) => {\n    let response = await authAPI.logout();\n\n    if(response.data.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false));\n    }\n}\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}